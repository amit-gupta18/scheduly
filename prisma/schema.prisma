generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  name      String?
  email     String?     @unique
  image     String?
  role      Role?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  accounts  Account[]
  sessions  Session[]

  buyerBookings  Appointment[] @relation("BuyerAppointments")
  sellerBookings Appointment[] @relation("SellerAppointments")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Appointment {
  id            String             @id @default(cuid())
  buyerId       String
  sellerId      String
  googleEventId String?
  status        AppointmentStatus  @default(PENDING)
  scheduledAt   DateTime

  buyer  User @relation("BuyerAppointments", fields: [buyerId], references: [id])
  seller User @relation("SellerAppointments", fields: [sellerId], references: [id])
}

enum Role {
  BUYER
  SELLER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
